#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_CRUD_TUT.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StudyDB")]
	public partial class mvctosqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExamTB(ExamTB instance);
    partial void UpdateExamTB(ExamTB instance);
    partial void DeleteExamTB(ExamTB instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public mvctosqlDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StudyDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public mvctosqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mvctosqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mvctosqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mvctosqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ExamTB> ExamTBs
		{
			get
			{
				return this.GetTable<ExamTB>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamTB")]
	public partial class ExamTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Rno;
		
		private System.Nullable<int> _Sem;
		
		private System.Nullable<double> _Per;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRnoChanging(System.Nullable<int> value);
    partial void OnRnoChanged();
    partial void OnSemChanging(System.Nullable<int> value);
    partial void OnSemChanged();
    partial void OnPerChanging(System.Nullable<double> value);
    partial void OnPerChanged();
    #endregion
		
		public ExamTB()
		{
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rno", DbType="Int")]
		public System.Nullable<int> Rno
		{
			get
			{
				return this._Rno;
			}
			set
			{
				if ((this._Rno != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRnoChanging(value);
					this.SendPropertyChanging();
					this._Rno = value;
					this.SendPropertyChanged("Rno");
					this.OnRnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sem", DbType="Int")]
		public System.Nullable<int> Sem
		{
			get
			{
				return this._Sem;
			}
			set
			{
				if ((this._Sem != value))
				{
					this.OnSemChanging(value);
					this.SendPropertyChanging();
					this._Sem = value;
					this.SendPropertyChanged("Sem");
					this.OnSemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Per", DbType="Float")]
		public System.Nullable<double> Per
		{
			get
			{
				return this._Per;
			}
			set
			{
				if ((this._Per != value))
				{
					this.OnPerChanging(value);
					this.SendPropertyChanging();
					this._Per = value;
					this.SendPropertyChanged("Per");
					this.OnPerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ExamTB", Storage="_Student", ThisKey="Rno", OtherKey="Rno", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ExamTBs.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ExamTBs.Add(this);
						this._Rno = value.Rno;
					}
					else
					{
						this._Rno = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Rno;
		
		private string _Name;
		
		private System.Nullable<int> _Sem;
		
		private System.Nullable<decimal> _Fees;
		
		private string _Gender;
		
		private EntitySet<ExamTB> _ExamTBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRnoChanging(int value);
    partial void OnRnoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSemChanging(System.Nullable<int> value);
    partial void OnSemChanged();
    partial void OnFeesChanging(System.Nullable<decimal> value);
    partial void OnFeesChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public Student()
		{
			this._ExamTBs = new EntitySet<ExamTB>(new Action<ExamTB>(this.attach_ExamTBs), new Action<ExamTB>(this.detach_ExamTBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rno", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Rno
		{
			get
			{
				return this._Rno;
			}
			set
			{
				if ((this._Rno != value))
				{
					this.OnRnoChanging(value);
					this.SendPropertyChanging();
					this._Rno = value;
					this.SendPropertyChanged("Rno");
					this.OnRnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sem", DbType="Int")]
		public System.Nullable<int> Sem
		{
			get
			{
				return this._Sem;
			}
			set
			{
				if ((this._Sem != value))
				{
					this.OnSemChanging(value);
					this.SendPropertyChanging();
					this._Sem = value;
					this.SendPropertyChanged("Sem");
					this.OnSemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fees", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this.OnFeesChanging(value);
					this.SendPropertyChanging();
					this._Fees = value;
					this.SendPropertyChanged("Fees");
					this.OnFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ExamTB", Storage="_ExamTBs", ThisKey="Rno", OtherKey="Rno")]
		public EntitySet<ExamTB> ExamTBs
		{
			get
			{
				return this._ExamTBs;
			}
			set
			{
				this._ExamTBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamTBs(ExamTB entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ExamTBs(ExamTB entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
}
#pragma warning restore 1591
