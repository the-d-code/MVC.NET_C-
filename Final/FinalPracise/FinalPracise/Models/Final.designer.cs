#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinalPracise.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="apiDemo")]
	public partial class FinalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategoryTB(CategoryTB instance);
    partial void UpdateCategoryTB(CategoryTB instance);
    partial void DeleteCategoryTB(CategoryTB instance);
    partial void InsertProductTB(ProductTB instance);
    partial void UpdateProductTB(ProductTB instance);
    partial void DeleteProductTB(ProductTB instance);
    #endregion
		
		public FinalDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["apiDemoConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FinalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CategoryTB> CategoryTBs
		{
			get
			{
				return this.GetTable<CategoryTB>();
			}
		}
		
		public System.Data.Linq.Table<ProductTB> ProductTBs
		{
			get
			{
				return this.GetTable<ProductTB>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryTB")]
	public partial class CategoryTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Categiry;
		
		private EntitySet<ProductTB> _ProductTBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCategiryChanging(string value);
    partial void OnCategiryChanged();
    #endregion
		
		public CategoryTB()
		{
			this._ProductTBs = new EntitySet<ProductTB>(new Action<ProductTB>(this.attach_ProductTBs), new Action<ProductTB>(this.detach_ProductTBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Categiry", DbType="VarChar(50)")]
		public string Categiry
		{
			get
			{
				return this._Categiry;
			}
			set
			{
				if ((this._Categiry != value))
				{
					this.OnCategiryChanging(value);
					this.SendPropertyChanging();
					this._Categiry = value;
					this.SendPropertyChanged("Categiry");
					this.OnCategiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTB_ProductTB", Storage="_ProductTBs", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<ProductTB> ProductTBs
		{
			get
			{
				return this._ProductTBs;
			}
			set
			{
				this._ProductTBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductTBs(ProductTB entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTB = this;
		}
		
		private void detach_ProductTBs(ProductTB entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductTB")]
	public partial class ProductTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _ProductName;
		
		private System.Nullable<int> _CategoryId;
		
		private System.Nullable<System.DateTime> _MfgDate;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<bool> _IsAvailable;
		
		private EntityRef<CategoryTB> _CategoryTB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnMfgDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMfgDateChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnIsAvailableChanging(System.Nullable<bool> value);
    partial void OnIsAvailableChanged();
    #endregion
		
		public ProductTB()
		{
			this._CategoryTB = default(EntityRef<CategoryTB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(50)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._CategoryTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MfgDate
		{
			get
			{
				return this._MfgDate;
			}
			set
			{
				if ((this._MfgDate != value))
				{
					this.OnMfgDateChanging(value);
					this.SendPropertyChanging();
					this._MfgDate = value;
					this.SendPropertyChanged("MfgDate");
					this.OnMfgDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvailable", DbType="Bit")]
		public System.Nullable<bool> IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTB_ProductTB", Storage="_CategoryTB", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public CategoryTB CategoryTB
		{
			get
			{
				return this._CategoryTB.Entity;
			}
			set
			{
				CategoryTB previousValue = this._CategoryTB.Entity;
				if (((previousValue != value) 
							|| (this._CategoryTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryTB.Entity = null;
						previousValue.ProductTBs.Remove(this);
					}
					this._CategoryTB.Entity = value;
					if ((value != null))
					{
						value.ProductTBs.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryTB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
