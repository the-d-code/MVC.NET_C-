#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace External_OnlineSaling.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Shopping")]
	public partial class DataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategoryTB(CategoryTB instance);
    partial void UpdateCategoryTB(CategoryTB instance);
    partial void DeleteCategoryTB(CategoryTB instance);
    partial void InsertOrderTB(OrderTB instance);
    partial void UpdateOrderTB(OrderTB instance);
    partial void DeleteOrderTB(OrderTB instance);
    partial void InsertProductTB(ProductTB instance);
    partial void UpdateProductTB(ProductTB instance);
    partial void DeleteProductTB(ProductTB instance);
    partial void InsertUserTB(UserTB instance);
    partial void UpdateUserTB(UserTB instance);
    partial void DeleteUserTB(UserTB instance);
    partial void InsertOrderDetailTB(OrderDetailTB instance);
    partial void UpdateOrderDetailTB(OrderDetailTB instance);
    partial void DeleteOrderDetailTB(OrderDetailTB instance);
    partial void InsertCountryTB(CountryTB instance);
    partial void UpdateCountryTB(CountryTB instance);
    partial void DeleteCountryTB(CountryTB instance);
    partial void InsertCityTB(CityTB instance);
    partial void UpdateCityTB(CityTB instance);
    partial void DeleteCityTB(CityTB instance);
    partial void InsertStateTB(StateTB instance);
    partial void UpdateStateTB(StateTB instance);
    partial void DeleteStateTB(StateTB instance);
    #endregion
		
		public DataContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ShoppingConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CategoryTB> CategoryTBs
		{
			get
			{
				return this.GetTable<CategoryTB>();
			}
		}
		
		public System.Data.Linq.Table<OrderTB> OrderTBs
		{
			get
			{
				return this.GetTable<OrderTB>();
			}
		}
		
		public System.Data.Linq.Table<ProductTB> ProductTBs
		{
			get
			{
				return this.GetTable<ProductTB>();
			}
		}
		
		public System.Data.Linq.Table<UserTB> UserTBs
		{
			get
			{
				return this.GetTable<UserTB>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetailTB> OrderDetailTBs
		{
			get
			{
				return this.GetTable<OrderDetailTB>();
			}
		}
		
		public System.Data.Linq.Table<CountryTB> CountryTBs
		{
			get
			{
				return this.GetTable<CountryTB>();
			}
		}
		
		public System.Data.Linq.Table<CityTB> CityTBs
		{
			get
			{
				return this.GetTable<CityTB>();
			}
		}
		
		public System.Data.Linq.Table<StateTB> StateTBs
		{
			get
			{
				return this.GetTable<StateTB>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryTB")]
	public partial class CategoryTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Category;
		
		private EntitySet<ProductTB> _ProductTBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
		
		public CategoryTB()
		{
			this._ProductTBs = new EntitySet<ProductTB>(new Action<ProductTB>(this.attach_ProductTBs), new Action<ProductTB>(this.detach_ProductTBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NChar(10)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTB_ProductTB", Storage="_ProductTBs", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<ProductTB> ProductTBs
		{
			get
			{
				return this._ProductTBs;
			}
			set
			{
				this._ProductTBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductTBs(ProductTB entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTB = this;
		}
		
		private void detach_ProductTBs(ProductTB entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTB")]
	public partial class OrderTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private EntitySet<OrderDetailTB> _OrderDetailTBs;
		
		private EntityRef<UserTB> _UserTB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public OrderTB()
		{
			this._OrderDetailTBs = new EntitySet<OrderDetailTB>(new Action<OrderDetailTB>(this.attach_OrderDetailTBs), new Action<OrderDetailTB>(this.detach_OrderDetailTBs));
			this._UserTB = default(EntityRef<UserTB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTB_OrderDetailTB", Storage="_OrderDetailTBs", ThisKey="OrderId", OtherKey="OrderId")]
		public EntitySet<OrderDetailTB> OrderDetailTBs
		{
			get
			{
				return this._OrderDetailTBs;
			}
			set
			{
				this._OrderDetailTBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTB_OrderTB", Storage="_UserTB", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserTB UserTB
		{
			get
			{
				return this._UserTB.Entity;
			}
			set
			{
				UserTB previousValue = this._UserTB.Entity;
				if (((previousValue != value) 
							|| (this._UserTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTB.Entity = null;
						previousValue.OrderTBs.Remove(this);
					}
					this._UserTB.Entity = value;
					if ((value != null))
					{
						value.OrderTBs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserTB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.OrderTB = this;
		}
		
		private void detach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.OrderTB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductTB")]
	public partial class ProductTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _ProductName;
		
		private System.Nullable<int> _CategoryId;
		
		private System.Nullable<System.DateTime> _MfgDate;
		
		private System.Nullable<decimal> _Price;
		
		private string _Description;
		
		private EntitySet<OrderDetailTB> _OrderDetailTBs;
		
		private EntityRef<CategoryTB> _CategoryTB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnMfgDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMfgDateChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ProductTB()
		{
			this._OrderDetailTBs = new EntitySet<OrderDetailTB>(new Action<OrderDetailTB>(this.attach_OrderDetailTBs), new Action<OrderDetailTB>(this.detach_OrderDetailTBs));
			this._CategoryTB = default(EntityRef<CategoryTB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(50)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._CategoryTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgDate", DbType="Date")]
		public System.Nullable<System.DateTime> MfgDate
		{
			get
			{
				return this._MfgDate;
			}
			set
			{
				if ((this._MfgDate != value))
				{
					this.OnMfgDateChanging(value);
					this.SendPropertyChanging();
					this._MfgDate = value;
					this.SendPropertyChanged("MfgDate");
					this.OnMfgDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductTB_OrderDetailTB", Storage="_OrderDetailTBs", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<OrderDetailTB> OrderDetailTBs
		{
			get
			{
				return this._OrderDetailTBs;
			}
			set
			{
				this._OrderDetailTBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTB_ProductTB", Storage="_CategoryTB", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public CategoryTB CategoryTB
		{
			get
			{
				return this._CategoryTB.Entity;
			}
			set
			{
				CategoryTB previousValue = this._CategoryTB.Entity;
				if (((previousValue != value) 
							|| (this._CategoryTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryTB.Entity = null;
						previousValue.ProductTBs.Remove(this);
					}
					this._CategoryTB.Entity = value;
					if ((value != null))
					{
						value.ProductTBs.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryTB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.ProductTB = this;
		}
		
		private void detach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.ProductTB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTB")]
	public partial class UserTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Username;
		
		private string _Password;
		
		private string _UserType;
		
		private string _MobileNo;
		
		private string _Address;
		
		private string _City;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _Dob;
		
		private EntitySet<OrderTB> _OrderTBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    partial void OnMobileNoChanging(string value);
    partial void OnMobileNoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDobChanging(System.Nullable<System.DateTime> value);
    partial void OnDobChanged();
    #endregion
		
		public UserTB()
		{
			this._OrderTBs = new EntitySet<OrderTB>(new Action<OrderTB>(this.attach_OrderTBs), new Action<OrderTB>(this.detach_OrderTBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(50)")]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNo", DbType="VarChar(50)")]
		public string MobileNo
		{
			get
			{
				return this._MobileNo;
			}
			set
			{
				if ((this._MobileNo != value))
				{
					this.OnMobileNoChanging(value);
					this.SendPropertyChanging();
					this._MobileNo = value;
					this.SendPropertyChanged("MobileNo");
					this.OnMobileNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="Date")]
		public System.Nullable<System.DateTime> Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTB_OrderTB", Storage="_OrderTBs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<OrderTB> OrderTBs
		{
			get
			{
				return this._OrderTBs;
			}
			set
			{
				this._OrderTBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTBs(OrderTB entity)
		{
			this.SendPropertyChanging();
			entity.UserTB = this;
		}
		
		private void detach_OrderTBs(OrderTB entity)
		{
			this.SendPropertyChanging();
			entity.UserTB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetailTB")]
	public partial class OrderDetailTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailId;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _Qty;
		
		private string _Address;
		
		private System.Nullable<int> _CountryId;
		
		private System.Nullable<int> _StateId;
		
		private System.Nullable<int> _CityId;
		
		private EntityRef<OrderTB> _OrderTB;
		
		private EntityRef<ProductTB> _ProductTB;
		
		private EntityRef<CountryTB> _CountryTB;
		
		private EntityRef<CityTB> _CityTB;
		
		private EntityRef<StateTB> _StateTB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIdChanging(int value);
    partial void OnOrderDetailIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    #endregion
		
		public OrderDetailTB()
		{
			this._OrderTB = default(EntityRef<OrderTB>);
			this._ProductTB = default(EntityRef<ProductTB>);
			this._CountryTB = default(EntityRef<CountryTB>);
			this._CityTB = default(EntityRef<CityTB>);
			this._StateTB = default(EntityRef<StateTB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDetailId
		{
			get
			{
				return this._OrderDetailId;
			}
			set
			{
				if ((this._OrderDetailId != value))
				{
					this.OnOrderDetailIdChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailId = value;
					this.SendPropertyChanged("OrderDetailId");
					this.OnOrderDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._OrderTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._ProductTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._CountryTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._StateTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._CityTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTB_OrderDetailTB", Storage="_OrderTB", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true)]
		public OrderTB OrderTB
		{
			get
			{
				return this._OrderTB.Entity;
			}
			set
			{
				OrderTB previousValue = this._OrderTB.Entity;
				if (((previousValue != value) 
							|| (this._OrderTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderTB.Entity = null;
						previousValue.OrderDetailTBs.Remove(this);
					}
					this._OrderTB.Entity = value;
					if ((value != null))
					{
						value.OrderDetailTBs.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderTB");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductTB_OrderDetailTB", Storage="_ProductTB", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public ProductTB ProductTB
		{
			get
			{
				return this._ProductTB.Entity;
			}
			set
			{
				ProductTB previousValue = this._ProductTB.Entity;
				if (((previousValue != value) 
							|| (this._ProductTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductTB.Entity = null;
						previousValue.OrderDetailTBs.Remove(this);
					}
					this._ProductTB.Entity = value;
					if ((value != null))
					{
						value.OrderDetailTBs.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductTB");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryTB_OrderDetailTB", Storage="_CountryTB", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public CountryTB CountryTB
		{
			get
			{
				return this._CountryTB.Entity;
			}
			set
			{
				CountryTB previousValue = this._CountryTB.Entity;
				if (((previousValue != value) 
							|| (this._CountryTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryTB.Entity = null;
						previousValue.OrderDetailTBs.Remove(this);
					}
					this._CountryTB.Entity = value;
					if ((value != null))
					{
						value.OrderDetailTBs.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryTB");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityTB_OrderDetailTB", Storage="_CityTB", ThisKey="CityId", OtherKey="CityId", IsForeignKey=true)]
		public CityTB CityTB
		{
			get
			{
				return this._CityTB.Entity;
			}
			set
			{
				CityTB previousValue = this._CityTB.Entity;
				if (((previousValue != value) 
							|| (this._CityTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CityTB.Entity = null;
						previousValue.OrderDetailTBs.Remove(this);
					}
					this._CityTB.Entity = value;
					if ((value != null))
					{
						value.OrderDetailTBs.Add(this);
						this._CityId = value.CityId;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CityTB");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateTB_OrderDetailTB", Storage="_StateTB", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public StateTB StateTB
		{
			get
			{
				return this._StateTB.Entity;
			}
			set
			{
				StateTB previousValue = this._StateTB.Entity;
				if (((previousValue != value) 
							|| (this._StateTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateTB.Entity = null;
						previousValue.OrderDetailTBs.Remove(this);
					}
					this._StateTB.Entity = value;
					if ((value != null))
					{
						value.OrderDetailTBs.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("StateTB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountryTB")]
	public partial class CountryTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _CountryName;
		
		private EntitySet<OrderDetailTB> _OrderDetailTBs;
		
		private EntitySet<StateTB> _StateTBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public CountryTB()
		{
			this._OrderDetailTBs = new EntitySet<OrderDetailTB>(new Action<OrderDetailTB>(this.attach_OrderDetailTBs), new Action<OrderDetailTB>(this.detach_OrderDetailTBs));
			this._StateTBs = new EntitySet<StateTB>(new Action<StateTB>(this.attach_StateTBs), new Action<StateTB>(this.detach_StateTBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryTB_OrderDetailTB", Storage="_OrderDetailTBs", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<OrderDetailTB> OrderDetailTBs
		{
			get
			{
				return this._OrderDetailTBs;
			}
			set
			{
				this._OrderDetailTBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryTB_StateTB", Storage="_StateTBs", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<StateTB> StateTBs
		{
			get
			{
				return this._StateTBs;
			}
			set
			{
				this._StateTBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.CountryTB = this;
		}
		
		private void detach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.CountryTB = null;
		}
		
		private void attach_StateTBs(StateTB entity)
		{
			this.SendPropertyChanging();
			entity.CountryTB = this;
		}
		
		private void detach_StateTBs(StateTB entity)
		{
			this.SendPropertyChanging();
			entity.CountryTB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityTB")]
	public partial class CityTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityId;
		
		private string _CityName;
		
		private System.Nullable<int> _StateId;
		
		private EntitySet<OrderDetailTB> _OrderDetailTBs;
		
		private EntityRef<StateTB> _StateTB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    #endregion
		
		public CityTB()
		{
			this._OrderDetailTBs = new EntitySet<OrderDetailTB>(new Action<OrderDetailTB>(this.attach_OrderDetailTBs), new Action<OrderDetailTB>(this.detach_OrderDetailTBs));
			this._StateTB = default(EntityRef<StateTB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NChar(10)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._StateTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityTB_OrderDetailTB", Storage="_OrderDetailTBs", ThisKey="CityId", OtherKey="CityId")]
		public EntitySet<OrderDetailTB> OrderDetailTBs
		{
			get
			{
				return this._OrderDetailTBs;
			}
			set
			{
				this._OrderDetailTBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateTB_CityTB", Storage="_StateTB", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public StateTB StateTB
		{
			get
			{
				return this._StateTB.Entity;
			}
			set
			{
				StateTB previousValue = this._StateTB.Entity;
				if (((previousValue != value) 
							|| (this._StateTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateTB.Entity = null;
						previousValue.CityTBs.Remove(this);
					}
					this._StateTB.Entity = value;
					if ((value != null))
					{
						value.CityTBs.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("StateTB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.CityTB = this;
		}
		
		private void detach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.CityTB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateTB")]
	public partial class StateTB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateId;
		
		private string _StateName;
		
		private System.Nullable<int> _CountryId;
		
		private EntitySet<OrderDetailTB> _OrderDetailTBs;
		
		private EntitySet<CityTB> _CityTBs;
		
		private EntityRef<CountryTB> _CountryTB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    #endregion
		
		public StateTB()
		{
			this._OrderDetailTBs = new EntitySet<OrderDetailTB>(new Action<OrderDetailTB>(this.attach_OrderDetailTBs), new Action<OrderDetailTB>(this.detach_OrderDetailTBs));
			this._CityTBs = new EntitySet<CityTB>(new Action<CityTB>(this.attach_CityTBs), new Action<CityTB>(this.detach_CityTBs));
			this._CountryTB = default(EntityRef<CountryTB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(50)")]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._CountryTB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateTB_OrderDetailTB", Storage="_OrderDetailTBs", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<OrderDetailTB> OrderDetailTBs
		{
			get
			{
				return this._OrderDetailTBs;
			}
			set
			{
				this._OrderDetailTBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateTB_CityTB", Storage="_CityTBs", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<CityTB> CityTBs
		{
			get
			{
				return this._CityTBs;
			}
			set
			{
				this._CityTBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryTB_StateTB", Storage="_CountryTB", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public CountryTB CountryTB
		{
			get
			{
				return this._CountryTB.Entity;
			}
			set
			{
				CountryTB previousValue = this._CountryTB.Entity;
				if (((previousValue != value) 
							|| (this._CountryTB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryTB.Entity = null;
						previousValue.StateTBs.Remove(this);
					}
					this._CountryTB.Entity = value;
					if ((value != null))
					{
						value.StateTBs.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryTB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.StateTB = this;
		}
		
		private void detach_OrderDetailTBs(OrderDetailTB entity)
		{
			this.SendPropertyChanging();
			entity.StateTB = null;
		}
		
		private void attach_CityTBs(CityTB entity)
		{
			this.SendPropertyChanging();
			entity.StateTB = this;
		}
		
		private void detach_CityTBs(CityTB entity)
		{
			this.SendPropertyChanging();
			entity.StateTB = null;
		}
	}
}
#pragma warning restore 1591
